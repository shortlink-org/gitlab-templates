spec:
  inputs:
    stage:
      default: build
      description: "Define the stage this job will run in"
    docker_version:
      default: "28.3.3"
      description: "Define the version of Docker to use"
    buildkit_version:
      default: "v0.26.1"
      description: "Define the version of BuildKit to use"
---

.template_build:
  stage: $[[ inputs.stage ]]
  services:
    - name: docker:$[[ inputs.docker_version ]]-dind
      command: ["--experimental"]
  image: docker:$[[ inputs.docker_version ]]-cli

  variables:
    # GIT_STRATEGY: none # Set `none` if we use git sparse-checkout
    COSIGN_YES: "true"  # Used by Cosign to skip confirmation prompts for non-destructive operations
    FF_SCRIPT_SECTIONS: "true" # Enables GitLab's CI script sections for better multi-line script output
    DOCKER_BUILDKIT: 1
    DOCKER_CONTENT_TRUST: 1
    DOCKER_BUILDX_VERSION: v0.26.1
    BUILDX_GIT_LABELS: 1

  id_tokens:
    SIGSTORE_ID_TOKEN: # Used by Cosign to get certificate from Fulcio
      aud: sigstore

  before_script:
    # Auth
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

    # Dependencies
    - apk add --no-cache curl git

    # Buildx
    - mkdir -p ~/.docker/cli-plugins
    - |
      curl -sSLo ~/.docker/cli-plugins/docker-buildx \
        "https://github.com/docker/buildx/releases/download/${DOCKER_BUILDX_VERSION}/buildx-${DOCKER_BUILDX_VERSION}.linux-amd64"
    - chmod +x ~/.docker/cli-plugins/docker-buildx
    - DOCKER_CONTENT_TRUST=0 docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker buildx inspect --bootstrap

  script:
    - |
      # Build & push multi-arch image
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --provenance=true \
        --sbom=true \
        --build-arg APP_ENV=ci \
        --build-arg CI_COMMIT_TAG="$CI_COMMIT_TAG" \
        --build-arg CI_COMMIT_SHA="$CI_COMMIT_SHA" \
        --build-arg CI_COMMIT_REF_NAME="$CI_COMMIT_REF_SLUG" \
        --build-arg CI_PIPELINE_ID="$CI_PIPELINE_ID" \
        --build-arg CI_PIPELINE_URL="$CI_PIPELINE_URL" \
        ${DOCKERFILE_ARGS:+$DOCKERFILE_ARGS} \
        --push \
        -t "${REGISTRY_IMAGE}:latest" \
        ${CI_COMMIT_TAG:+-t "${REGISTRY_IMAGE}:${CI_COMMIT_TAG}"} \
        ${DOCKERFILE_PATH:+-f "$DOCKERFILE_PATH"} \
        .

  after_script:
    - apk add --no-cache cosign
    # Skip signing on branch pipelines or when the tag wasn’t pushed
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        IMAGE_REF="${REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        # Obtain remote digest (works for manifest lists)
        IMAGE_DIGEST=$(docker buildx imagetools inspect "$IMAGE_REF" --format '{{.Digest}}' 2>/dev/null || true)
        if [ -n "$IMAGE_DIGEST" ]; then
          echo "Signing $IMAGE_DIGEST"
          cosign sign --yes "$IMAGE_DIGEST" \
            --annotations "com.gitlab.ci.user.name=$GITLAB_USER_NAME" \
            --annotations "com.gitlab.ci.pipeline.id=$CI_PIPELINE_ID" \
            --annotations "com.gitlab.ci.pipeline.url=$CI_PIPELINE_URL" \
            --annotations "com.gitlab.ci.job.id=$CI_JOB_ID" \
            --annotations "com.gitlab.ci.job.url=$CI_JOB_URL" \
            --annotations "com.gitlab.ci.commit.sha=$CI_COMMIT_SHA" \
            --annotations "com.gitlab.ci.commit.ref.name=$CI_COMMIT_REF_NAME" \
            --annotations "com.gitlab.ci.project.path=$CI_PROJECT_PATH" \
            --annotations "org.opencontainers.image.source=$CI_PROJECT_URL" \
            --annotations "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
            --annotations "tag=$CI_COMMIT_TAG"
        else
          echo "Image $IMAGE_REF not found in registry – skipping cosign signing."
        fi
      else
        echo "No CI_COMMIT_TAG set – skipping cosign signing."
      fi

  tags:
    - gitlab-org-docker

  retry: 1
  artifacts:
    paths:
      - cosign.bundle
    expire_in: 3 weeks
  rules:
    - when: always

########################################################################
# BuildKit-inside-dind variant (unchanged except for quoting fixes)
########################################################################
.template_build_kit:
  extends: .template_build
  services:
    - name: moby/buildkit:$[[ inputs.buildkit_version ]]
      alias: buildkitd
      command: ["--addr=tcp://0.0.0.0:1234"]
  image:
    name: moby/buildkit:$[[ inputs.buildkit_version ]]
    entrypoint: [""]
  variables:
    # GIT_STRATEGY: none # Set `none` if we use git sparse-checkout
    BUILDKIT_HOST: tcp://buildkitd:1234
  before_script:
    - date
  script:
    - |
      buildctl build \
        --frontend dockerfile.v0 \
        --local context=. \
        --frontend-opt filename="${DOCKERFILE_PATH}" \
        --opt build-arg:APP_ENV=ci \
        --opt build-arg:CI_COMMIT_TAG="$CI_COMMIT_TAG" \
        --opt build-arg:CI_COMMIT_SHA="$CI_COMMIT_SHA" \
        --opt build-arg:CI_COMMIT_REF_NAME="$CI_COMMIT_REF_NAME" \
        --opt build-arg:CI_PIPELINE_ID="$CI_PIPELINE_ID" \
        --opt build-arg:CI_PIPELINE_URL="$CI_PIPELINE_URL" \
        --opt platform=linux/amd64,linux/arm64 \
        --output type=image,oci-mediatypes=true,compression=estargz,name="${REGISTRY_IMAGE}:latest",push=true \
        ${CI_COMMIT_TAG:+--output type=image,oci-mediatypes=true,compression=estargz,name="${REGISTRY_IMAGE}:${CI_COMMIT_TAG}",push=true}
