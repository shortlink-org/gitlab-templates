spec:
  inputs:
    provider:
      description: "Kube context provider (e.g., contabo)"

    namespace:
      description: "Kubernetes namespace"

    release_name:
      description: "Helm release name"

    helm_path:
      description: "Path to Helm chart"

    helm_arg:
      default: ""
      description: "Additional Helm args (e.g., -f values.sops.yaml)"

    kube_context:
      description: "Fully qualified kube context"

    environment_url:
      default: ""
      description: "Optional environment URL"
---

include:
  - local: $CI_SERVER_FQDN/shortlink-org/gitlab-templates/helm@main

stages:
  - deploy
  - action

deploy:
  extends:
    - .job_template_helm
  tags:
    - gitlab-org-docker
  stage: deploy
  variables:
    PROVIDER:        "$[[ inputs.provider ]]"
    NAMESPACE:       "$[[ inputs.namespace ]]"
    RELEASE_NAME:    "$[[ inputs.release_name ]]"
    HELM_PATH:       "$[[ inputs.helm_path ]]"
    HELM_ARG:        "$[[ inputs.helm_arg ]]"
    ENVIRONMENT_URL: "$[[ inputs.environment_url ]]"
    KUBE_CONTEXT:    "$[[ inputs.kube_context ]]"
  script:
    - |
      set -e
      VALUE_FILES=""

      if ls ${HELM_PATH}/*.values.yaml 1> /dev/null 2>&1; then
        for file in ${HELM_PATH}/*.values.yaml; do
          VALUE_FILES="$VALUE_FILES -f $file"
        done
      else
        echo "No .values.yaml files found in ${HELM_PATH}."
      fi

      helm secrets upgrade "${RELEASE_NAME}" "${HELM_PATH}" ${HELM_ARG} ${VALUE_FILES} \
        --kube-context="${KUBE_CONTEXT}" \
        --install \
        --atomic \
        --cleanup-on-fail \
        --wait-for-jobs \
        --namespace="${NAMESPACE}" \
        --create-namespace=true \
        --set deploy.image.tag="${CI_COMMIT_TAG}" \
        --set deploy.image.repository="${REGISTRY}" \
        --set deploy.annotations."app\.gitlab\.com\/app"="${CI_PROJECT_PATH_SLUG}",deploy.annotations."app\.gitlab\.com\/env"="${CI_ENVIRONMENT_SLUG}"
  environment:
    name: "$[[ inputs.provider ]]/$[[ inputs.release_name ]]"
    deployment_tier: production
    url: "$[[ inputs.environment_url ]]"
    on_stop: drop
    kubernetes:
      namespace: "$[[ inputs.namespace ]]"

# actions ===============================================================================================================

rollback:
  extends:
    - .job_template_helm
  stage: action
  variables:
    NAMESPACE:    "$[[ inputs.namespace ]]"
    RELEASE_NAME: "$[[ inputs.release_name ]]"
  script:
    - helm --namespace="${NAMESPACE}" rollback "${RELEASE_NAME}" 0
  needs:
    - job: deploy
  when: manual

history:
  extends:
    - .job_template_helm
  stage: action
  variables:
    NAMESPACE:    "$[[ inputs.namespace ]]"
    RELEASE_NAME: "$[[ inputs.release_name ]]"
  script:
    - helm --namespace="${NAMESPACE}" history "${RELEASE_NAME}"
  needs:
    - job: deploy
  when: manual

drop:
  extends:
    - .job_template_helm
  stage: action
  variables:
    NAMESPACE:    "$[[ inputs.namespace ]]"
    RELEASE_NAME: "$[[ inputs.release_name ]]"
    PROVIDER:     "$[[ inputs.provider ]]"
  script:
    - helm del -n "${NAMESPACE}" "${RELEASE_NAME}"
  needs: []
  environment:
    name: "$[[ inputs.provider ]]/$[[ inputs.release_name ]]"
    action: stop
  when: manual
